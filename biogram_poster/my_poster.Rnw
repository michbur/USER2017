\documentclass[final]{beamer}
\usepackage{grffile}
\mode<presentation>{\usetheme{CambridgeUSPOL}}

\usepackage[utf8]{inputenc}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage{natbib}
\usepackage{graphicx}
\usepackage{array,booktabs,tabularx}
\usepackage{epstopdf}
\usepackage{colortbl, xcolor}
\newcolumntype{Z}{>{\centering\arraybackslash}X}

% rysunki
\usepackage{tikz}
\usepackage{ifthen}
\usepackage{xxcolor}
\usetikzlibrary{arrows}
\usetikzlibrary[topaths]
\usetikzlibrary{decorations.pathreplacing}
%\usepackage{times}\usefonttheme{professionalfonts}  % times is obsolete
\usefonttheme[onlymath]{serif}
\boldmath
\usepackage[orientation=portrait,size=a0,scale=1.4,debug]{beamerposter}                       % e.g. for DIN-A0 poster
%\usepackage[orientation=portrait,size=a1,scale=1.4,grid,debug]{beamerposter}                  % e.g. for DIN-A1 poster, with optional grid and debug output
%\usepackage[size=custom,width=200,height=120,scale=2,debug]{beamerposter}                     % e.g. for custom size poster
%\usepackage[orientation=portrait,size=a0,scale=1.0,printer=rwth-glossy-uv.df]{beamerposter}   % e.g. for DIN-A0 poster with rwth-glossy-uv printer check
% ...
%

\usecolortheme{seagull}
\useinnertheme{rectangles}
\setbeamercolor{item projected}{bg=darkred}
% \setbeamertemplate{enumerate items}[default]
\setbeamertemplate{caption}{\insertcaption} 
\setbeamertemplate{navigation symbols}{}
\setbeamercovered{transparent}
\setbeamercolor{block title}{fg=darkred}
\setbeamercolor{local structure}{fg=darkred}

\setbeamercolor*{enumerate item}{fg=darkred}
\setbeamercolor*{enumerate subitem}{fg=darkred}
\setbeamercolor*{enumerate subsubitem}{fg=darkred}

\setbeamercolor*{itemize item}{fg=darkred}
\setbeamercolor*{itemize subitem}{fg=darkred}
\setbeamercolor*{itemize subsubitem}{fg=darkred}

\newlength{\columnheight}
\setlength{\columnheight}{100.5cm}
\renewcommand{\thetable}{}
\def\andname{,}
\authornote{}

\renewcommand{\APACrefatitle}[2]{}
\renewcommand{\bibliographytypesize}{\footnotesize} 
\renewcommand{\APACrefYearMonthDay}[3]{%
  {\BBOP}{#1}
  {\BBCP}
}

\begin{document}

<<knitrIntro, echo = FALSE, message=FALSE,warning=FALSE>>=
source("my_ggplot_theme.R")

g_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}

library(dplyr)
library(reshape2)
library(xtable)
library(biogram)

load("signalhsmm_poster.RData")



@


\date{}

\author{Piotr Sobczyk\inst{1}, Chris Lauber\inst{2}, Pawe\l{} Mackiewicz\inst{3}, Micha\l{} Burdukiewicz\inst{3}*\\
\normaltext{*michalburdukiewicz@gmail.com} $\diamondsuit$ \normaltext{michbur@github}}

\institute{\small{\textsuperscript{1}Wroc\l{}aw University of Science and Technology, Faculty of Pure and Applied Mathematics,
\textsuperscript{2}Dresden University of Technology, Bioinformatics Core Unit,
\textsuperscript{3}University of Wroc\l{}aw, Department of Genomics
}
}

\title{\huge biogram: n-gram analysis of biological sequences in R}

\begin{frame}
\begin{columns}
\begin{column}{.51\textwidth}
\begin{beamercolorbox}[center,wd=\textwidth]{postercolumn}
\begin{minipage}[T]{.95\textwidth}
\parbox[t][\columnheight]{\textwidth}
{

\begin{block}{Introduction}
n-grams (k-mers) are vectors of \textbf{n} characters derived from input 
sequences. 
Originally developed for natural language processing, they are also widely used 
in genomics, transcriptomics and proteomics. The \textit{biogram} package allows 
n-gram analysis of biological sequences and accompanies it with unique 
functionality for generation of simplified amino acid alphabets.

\small{
       \begin{columns}[c] % the "c" option specifies center vertical alignment
    \column{.5\textwidth} 
<<echo = FALSE,message=FALSE,results='asis'>>=
sample_seq <- matrix(sample(c("A", "C", "G", "T"), 18, replace = TRUE), nrow = 3)
colnames(sample_seq) <- paste0("P", 1L:ncol(sample_seq))
rownames(sample_seq) <- paste0("S", 1L:nrow(sample_seq))
rws <- seq(1, nrow(sample_seq) - 1, by = 2)
col <- rep("\\rowcolor{white}", length(rws))

print(xtable(data.frame(sample_seq), caption = "Sample sequences.  S - sequence, 
P - position.", digits = 0),
      booktabs = TRUE, add.to.row = list(pos = as.list(rws), command = col))

# unis <- count_ngrams(sample_seq, 1, 1L:4, pos = TRUE)
# unis <- data.frame(as.matrix(unis))[, 1L:7]
# print(xtable(unis, caption = "A fraction of possible 1-grams with position information.", digits = 0), include.rownames = FALSE)
@
      
      
     % column designated by a command

\column{.5\textwidth}
    
<<echo = FALSE,message=FALSE,results='asis'>>=
    
     unis <- count_ngrams(sample_seq, 1, c("A", "C", "G", "T"))
unis <- data.frame(as.matrix(unis))
colnames(unis) <- c("A", "C", "G", "T")
rownames(unis) <- paste0("S", 1L:nrow(sample_seq))
print(xtable(unis, caption = "Unigram counts.", digits = 0), include.rownames = TRUE,
      booktabs = TRUE, add.to.row = list(pos = as.list(rws), command = col))
@

    \end{columns}

<<echo = FALSE,message=FALSE,results='asis'>>=
    
unis <- count_ngrams(sample_seq, 1, c("A", "C", "G", "T"), pos = TRUE)
unis <- data.frame(as.matrix(unis))[, 1L:13]
colnames(unis) <- substr(sub("X", "P", colnames(unis)), 0, 4)
rownames(unis) <- paste0("S", 1L:nrow(sample_seq))
print(xtable(unis, caption = "A fraction of possible unigrams with position information.", digits = 0), 
      include.rownames = TRUE,
      booktabs = TRUE, add.to.row = list(pos = as.list(rws), command = col))
@
}    

Function: \textit{count\_ngrams()}.
    \end{block}
    \vfill 

\begin{block}{Curse of dimensionality}
    
Even when we limit ourselves to only continuous positioned n-grams build on $m$ possible
characters, feature space growths rapidly with the number of elements in n-gram
($n$) and the length of the sequence ($L$).    
    
The number of possible positioned n-grams: 

\begin{center}
\scalebox{0.85}{
$
n_{\text{max}} = L \times m^n
$
}
\end{center}

\\



<<echo = FALSE,message=FALSE,fig.align='center',fig.width=14,fig.height=5.6>>=
library(reshape2)
n <- 1:6
n_max <- 4^n

dat <- melt(sapply(2:5*5, function(i) i * n_max))
dat[["Var2"]] <- factor(dat[["Var2"]])
levels(dat[["Var2"]]) <- 2:5*5
colnames(dat) <- c("n", "L", "n_max")
ggplot(dat, aes(x = n, y = n_max, fill = L, col = L)) + 
  geom_line(linetype="dotted", size=1.5) + 
  geom_point(size=7, shape=21) +
  scale_x_continuous(breaks = 0L:6) +
  scale_y_continuous(expression(n["max"])) +
  my_theme

@

To decrease $m$, one may reduce the amino acid alphabet using heuristics provided in \textit{biogram}.

Function: \textit{reduce\_alphabet()}.


    \end{block}
    \vfill
    
    \begin{block}{Selection of important n-grams}
    Model and statistic independent permutation tests can be used to filter features obtained through counting n-grams.
    
    During a permutation test class labels are randomly exchanged during computation of a significance statistic. p-values are defined as:
    
\begin{center}
\scalebox{0.85}{
$      
\textnormal{p-value} = \frac{N_{T_P > T_R}}{N}
$
}
\end{center}

where $N_{T_P > T_R}$ is number of times when $T_P$ (permuted test statistic) 
was more extreme than $T_R$ (test statistic for non-permuted data).

Permutation tests are computationally expensive (especially considering precise 
estimation of small p-values, because the number of permutations is inversely 
proportional to the interval between p-values).

\bigskip

\textbf{Qui}ck \textbf{P}ermutation \textbf{T}est (QuiPT) thanks to the unique 
parameterization replaces a permutation test with the exact two-sided Fisher's 
test reducing the computation cost and returning more precise p-values. 
  
<<echo = FALSE, message=FALSE,warning=FALSE,fig.width=14,fig.height=5.5,results='asis'>>=
load("data/times2.RData")

times_dat <- do.call(rbind, lapply(times, function(i) 
  t(sapply(i, function(j) {
    c(slow = unname(j[["slow"]]["elapsed"]),
      quick = unname(j[["quick"]]["elapsed"]))
  }))
)) %>% 
  data.frame %>% 
  mutate(size = sort(rep(1L:5*10, 10))) %>% 
  melt(id.vars = "size") %>% 
  group_by(size, variable) %>% 
  summarise(value = mean(value)) %>% 
  ungroup %>% 
  mutate(variable = factor(variable, labels = c("Classical permutation test", "QuiPT")))

ggplot(times_dat, aes(x = size, y = value, color = variable)) +
  geom_point(size = 7) +
  geom_line(linetype = "dotted") +
  scale_y_continuous("Time of computation [s]") +
  scale_x_continuous("Number of tested n-grams") +
  scale_color_manual("Test", values = c("red", "blue")) +
  my_theme
@

Function: \textit{test\_features()}.

    \end{block}
    \vfill


    \begin{block}{Bibliography}
    \tiny{
      \bibliographystyle{apalike}
      \bibliography{signalhsmm_poster}
    }
    \end{block}
    \vfill 

}
\end{minipage}
\end{beamercolorbox}
\end{column}


%new column ------------------------------------------------------    

\begin{column}{.50\textwidth}
\begin{beamercolorbox}[center,wd=\textwidth]{postercolumn}
\begin{minipage}[T]{.95\textwidth}  
\parbox[t][\columnheight]{\textwidth}
{

\begin{block}{Case study: signal peptide prediction}

The computational methods for the recognition of signal peptides, 
short peptides tagging secretory proteins, accurately identify typical peptides, 
well-represented in protein databases~\citep{petersen_signalp_2011}. However, 
these algorithms are not general enough to predict signal peptides with unique 
amino acid composition, for example those present in proteins from malaria 
parasites. 
\end{block}

     \begin{block}{PCA of signal peptides and mature proteins}
<<echo = FALSE,message=FALSE,results='asis',fig.width=14.1, fig.height=13.8>>=
freq_nondeg <- read.csv2("freq_nondeg.csv")[, -1]
freq_deg <- read.csv2("freq_deg.csv")[, -1]

do_pca <- function(x) 
  x %>% 
  select(-type, -taxon) %>% 
  prcomp(center = TRUE, scale = TRUE) %>% 
  getElement("x") %>% 
  data.frame() %>% 
  select(1, 2) %>% 
  cbind(select(x, type, taxon), .) %>% 
  mutate(type_nice = factor(type, labels = c("\nMature peptide", "\nSignal peptide")),
         taxon_nice = factor(taxon, labels = c("other", "malaria parasite"))) %>% 
  mutate(both = paste0(type_nice, " (", taxon_nice, ")\n"))

dat_deg <- do_pca(freq_deg) 
dat_nondeg <- do_pca(freq_nondeg)

# dat_deg <- read.table("PCAgr.txt", header = TRUE, sep = "\t")
# dat_nondeg <- read.table("PCA.txt", header = TRUE, sep = "\t")
# colnames(dat_deg) <- c("both", "PC1", "PC2")
# colnames(dat_nondeg) <- c("both", "PC1", "PC2")

plot_pca <- function(x)
  ggplot(x, aes(x = PC1, y = PC2, fill = both)) + 
  geom_density_2d(color = "black", contour = TRUE) +
  #geom_point() +
  stat_density2d(aes(fill=both,alpha=..level..), color = "black", contour = TRUE, geom="polygon") +
  scale_linetype_discrete("") +
  scale_fill_discrete("") +
  scale_shape_discrete("") +
  scale_color_discrete("") +
  scale_x_continuous("Principal Component 1") +
  scale_y_continuous("Principal Component 2") +
  scale_alpha_continuous(range = c(0.25, 0.4)) +
  guides(alpha = FALSE, fill = guide_legend(nrow = 2, byrow = FALSE)) +
  my_theme

p1 <- plot_pca(dat_nondeg) + ggtitle("Full alphabet") 
p2 <- plot_pca(dat_deg) + ggtitle("Reduced alphabet") + guides(fill = FALSE)
leg <- g_legend(p1)

grid.arrange(p1 + guides(fill = FALSE), p2, leg, nrow = 3, heights = c(0.40, 0.40, 0.12))

@ 

A countour plot of first two components in Principal Component 
Analysis of amino acid frequency. The signal peptides from malaria and other 
taxons differ significantly when the full amino acid alphabet is employed. After 
the reduction of the alphabet, the signal peptides group together despite their 
origin.

\bigskip

Here, the reduction of the amino acid alphabet not only creates more manageable 
feature space, but also mimics the biology behind the process of the signal 
peptide recognition. Grouping of amino acids reflects their physicochemical 
properties which are important in protein secretion.

    \end{block}
    \vfill

    
    \begin{block}{Benchmark with other predictors of signal peptides}
    Benchmark data set: 51 proteins with signal peptide and 211 proteins 
    without signal peptide from malaria parasites.
    
    signalHsmm - n-gram based software for prediction of signal peptides.
   
    \begin{table}[ht]
\centering
\begin{tabular}{rllll}
  \toprule
 & Sensitivity & Specificity & MCC & AUC \\ 
  \midrule
signalP 4.1 \citep{petersen_signalp_2011} & 0.8235 & 0.9100 & 0.6872 & 0.8667 \\ 
   \rowcolor{white}signalP 4.1 (tm) \citep{petersen_signalp_2011} & 0.6471 & 0.9431 & 0.6196 & 0.7951 \\ 
   PrediSi \citep{hiller_predisi:_2004} & 0.3333 & \textbf{0.9573} & 0.3849 & 0.6453 \\ 
   \rowcolor{white}Philius \citep{reynolds_transmembrane_2008} & 0.6078 & 0.9336 & 0.5684 & 0.7707 \\ 
  Phobius \citep{kall_combined_2004} & 0.6471 & 0.9289 & 0.5895 & 0.7880 \\ 
   \rowcolor{white}signalHsmm & 0.9804 & 0.8720 & 0.7409 & 0.9262 \\ 
  signalHsmm (hom. 50\%) & \textbf{1.0000} & 0.8768 & \textbf{0.7621} & \textbf{0.9384} \\ 
   \rowcolor{white}signalHsmm (raw aa) & 0.8431 & 0.9005 & 0.6853 & 0.8718 \\ 
   \bottomrule
\end{tabular}
\end{table}
    \end{block}
    \vfill
     
    \begin{block}{Conclusions and funding}
    
    
    \texit{biogram} is a versatile toolkit for n-gram analysis of biological sequences in \textbf{R}.
    
    \bigskip
    
      Thanks to the reduction of amino acid alphabet, signalHsmm is able 
      to recognize signal peptides from the malaria parasites and their 
relatives more accurately than other software. 

\bigskip

\textit{biogram} repository: \url{https://github.com/michbur/biogram}

\bigskip

signalHsmm web-server: \url{http://www.smorfland.uni.wroc.pl/shiny/signalHsmm/}. 

\bigskip

Find us online: \url{https://github.com/michbur/USER2017}.      

\small{This research was partially funded by the KNOW Consortium and National Science Center (2015/17/N/NZ2/01845).}

    \end{block}
    \vfill 
    
        
     
    


}
\end{minipage}
\end{beamercolorbox}
\end{column}
\end{columns}  
\end{frame}
\end{document}